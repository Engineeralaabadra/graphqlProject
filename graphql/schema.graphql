"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

type Query {
    users: [User!]! @paginate(type:"paginator" model:"App\\Models\\User")
    user(id: ID @eq): User @find
    userByEmail(email: String @eq): User @find

    task(id: ID @eq): Task @find
    tasks: [Task!]! @paginate(type:"paginator" model:"App\\Models\\Task")
}

type Mutation{
    createUser(
        name:String @rules(apply: ["required"])
        password:String @rules(apply: ["required"])
        email:String @rules(apply: ["required", "email","unique:users,email"])
    ): User @create(model: "App\\Models\\User")
    updateUser(
        id: ID @rules(apply: ["required"])
        name:String
        password:String @rules(apply: ["required"])
        email:String @rules(apply: ["email"])
    ): User @update(model: "App\\Models\\User")
    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User @delete(model: "App\\Models\\User")

    createTask(
        name:String @rules(apply: ["required"])
        description:String @rules(apply: ["required"])
        user_id:Int @rules(apply: ["required"])
    ): Task @create(model: "App\\Models\\Task")
    updateTask(
        id: ID @rules(apply: ["required"])
        name:String
        description:String
        user_id:Int @rules(apply: ["required"])
    ): Task @update(model: "App\\Models\\Task")
    deleteTask(
        id: ID! @rules(apply: ["required"])
    ): Task @delete(model: "App\\Models\\Task")

}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime!
    tasks:[Task!]! @hasMany
}

type Task {
    id: ID!
    name: String!
    description: String!
    user_id: User! @belongsTo
    created_at: DateTime!
    updated_at: DateTime!
}